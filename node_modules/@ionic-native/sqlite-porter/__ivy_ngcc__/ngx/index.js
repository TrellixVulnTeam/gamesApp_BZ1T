import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var SQLitePorter = /** @class */ (function (_super) {
    __extends(SQLitePorter, _super);
    function SQLitePorter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SQLitePorter.prototype.importSqlToDb = function (db, sql) { return cordova(this, "importSqlToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.exportDbToSql = function (db) { return cordova(this, "exportDbToSql", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.importJsonToDb = function (db, json) { return cordova(this, "importJsonToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.exportDbToJson = function (db) { return cordova(this, "exportDbToJson", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.wipeDb = function (db) { return cordova(this, "wipeDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.pluginName = "SQLitePorter";
    SQLitePorter.plugin = "uk.co.workingedge.cordova.plugin.sqliteporter";
    SQLitePorter.pluginRef = "cordova.plugins.sqlitePorter";
    SQLitePorter.repo = "https://github.com/dpa99c/cordova-sqlite-porter";
    SQLitePorter.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "iOS", "Tizen", "Windows", "Windows Phone"];
SQLitePorter.ɵfac = /*@__PURE__*/ function () { var ɵSQLitePorter_BaseFactory; return function SQLitePorter_Factory(t) { return (ɵSQLitePorter_BaseFactory || (ɵSQLitePorter_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SQLitePorter)))(t || SQLitePorter); }; }();
SQLitePorter.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SQLitePorter, factory: function (t) { return SQLitePorter.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SQLitePorter, [{
        type: Injectable
    }], null, null); })();
    return SQLitePorter;
}(IonicNativePlugin));
export { SQLitePorter };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvc3FsaXRlLXBvcnRlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFDM0M7QUFJVSxJQTBDd0IsZ0NBQWlCO0FBQUM7QUFFOUI7QUFBeUU7QUFBTSxJQVVuRyxvQ0FBYSxhQUFDLEVBQU8sRUFBRSxHQUFXO0FBTzlCLElBT0osb0NBQWEsYUFBQyxFQUFPO0FBSzRFLElBVWpHLHFDQUFjLGFBQUMsRUFBTyxFQUFFLElBQVM7QUFPcEIsSUFPYixxQ0FBYyxhQUFDLEVBQU87QUFNUSxJQVE5Qiw2QkFBTSxhQUFDLEVBQU87QUFJaUY7QUFBOEM7QUFBMkU7QUFBNkQ7QUFBMkU7Z0RBMUVqVyxVQUFVOzs7OzBCQUNMO0FBQUMsdUJBaERQO0FBQUUsRUFnRGdDLGlCQUFpQjtBQUNsRCxTQURZLFlBQVk7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIFNRTGl0ZSBQb3J0ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBDb3Jkb3ZhL1Bob25lZ2FwIHBsdWdpbiBjYW4gYmUgdXNlZCB0byBpbXBvcnQvZXhwb3J0IHRvL2Zyb20gYSBTUUxpdGUgZGF0YWJhc2UgdXNpbmcgZWl0aGVyIFNRTCBvciBKU09OLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU1FMaXRlUG9ydGVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zcWxpdGUtcG9ydGVyL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3FsaXRlUG9ydGVyOiBTUUxpdGVQb3J0ZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBkYiA9IHdpbmRvdy5vcGVuRGF0YWJhc2UoJ1Rlc3QnLCAnMS4wJywgJ1Rlc3REQicsIDEgKiAxMDI0KTtcbiAqIC8vIG9yIHdlIGNhbiB1c2UgU1FMaXRlIHBsdWdpblxuICogLy8gd2Ugd2lsbCBhc3N1bWUgdGhhdCB3ZSBpbmplY3RlZCBTUUxpdGUgaW50byB0aGlzIGNvbXBvbmVudCBhcyBzcWxpdGVcbiAqIHRoaXMuc3FsaXRlLmNyZWF0ZSh7XG4gKiAgIG5hbWU6ICdkYXRhLmRiJyxcbiAqICAgbG9jYXRpb246ICdkZWZhdWx0J1xuICogfSlcbiAqICAgLnRoZW4oKGRiOiBhbnkpID0+IHtcbiAqICAgICBsZXQgZGJJbnN0YW5jZSA9IGRiLl9vYmplY3RJbnN0YW5jZTtcbiAqICAgICAvLyB3ZSBjYW4gcGFzcyBkYi5fb2JqZWN0SW5zdGFuY2UgYXMgdGhlIGRhdGFiYXNlIG9wdGlvbiBpbiBhbGwgU1FMaXRlUG9ydGVyIG1ldGhvZHNcbiAqICAgfSk7XG4gKlxuICpcbiAqIGxldCBzcWwgPSAnQ1JFQVRFIFRBQkxFIEFydGlzdCAoW0lkXSBQUklNQVJZIEtFWSwgW1RpdGxlXSk7JyArXG4gKiAgICAgICAgICAgICdJTlNFUlQgSU5UTyBBcnRpc3QoSWQsVGl0bGUpIFZBTFVFUyAoXCIxXCIsXCJGcmVkXCIpOyc7XG4gKlxuICogdGhpcy5zcWxpdGVQb3J0ZXIuaW1wb3J0U3FsVG9EYihkYiwgc3FsKVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnSW1wb3J0ZWQnKSlcbiAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG4gKlxuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1NRTGl0ZVBvcnRlcicsXG4gIHBsdWdpbjogJ3VrLmNvLndvcmtpbmdlZGdlLmNvcmRvdmEucGx1Z2luLnNxbGl0ZXBvcnRlcicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zcWxpdGVQb3J0ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLXNxbGl0ZS1wb3J0ZXInLFxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1RpemVuJywgJ1dpbmRvd3MnLCAnV2luZG93cyBQaG9uZSddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTUUxpdGVQb3J0ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIHNldCBvZiBTUUwgc3RhdGVtZW50cyBhZ2FpbnN0IHRoZSBkZWZpbmVkIGRhdGFiYXNlLiBDYW4gYmUgdXNlZCB0byBpbXBvcnQgZGF0YSBkZWZpbmVkIGluIHRoZSBTUUwgc3RhdGVtZW50cyBpbnRvIHRoZSBkYXRhYmFzZSwgYW5kIG1heSBhZGRpdGlvbmFsbHkgaW5jbHVkZSBjb21tYW5kcyB0byBjcmVhdGUgdGhlIHRhYmxlIHN0cnVjdHVyZS5cbiAgICogQHBhcmFtIGRiIHtPYmplY3R9IERhdGFiYXNlIG9iamVjdFxuICAgKiBAcGFyYW0gc3FsIHtzdHJpbmd9IFNRTCBzdGF0ZW1lbnRzIHRvIGV4ZWN1dGUgYWdhaW5zdCB0aGUgZGF0YWJhc2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJyxcbiAgfSlcbiAgaW1wb3J0U3FsVG9EYihkYjogYW55LCBzcWw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydHMgYSBTUUxpdGUgREIgYXMgYSBzZXQgb2YgU1FMIHN0YXRlbWVudHMuXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJyxcbiAgfSlcbiAgZXhwb3J0RGJUb1NxbChkYjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGFibGUgc3RydWN0dXJlIGFuZC9vciByb3cgZGF0YSBjb250YWluZWQgd2l0aGluIGEgSlNPTiBzdHJ1Y3R1cmUgaW50byBTUUwgc3RhdGVtZW50cyB0aGF0IGNhbiBiZSBleGVjdXRlZCBhZ2FpbnN0IGEgU1FMaXRlIGRhdGFiYXNlLiBDYW4gYmUgdXNlZCB0byBpbXBvcnQgZGF0YSBpbnRvIHRoZSBkYXRhYmFzZSBhbmQvb3IgY3JlYXRlIHRoZSB0YWJsZSBzdHJ1Y3R1cmUuXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHBhcmFtIGpzb24ge09iamVjdHxzdHJpbmd9IEpTT04gc3RydWN0dXJlIGNvbnRhaW5pbmcgcm93IGRhdGEgYW5kL29yIHRhYmxlIHN0cnVjdHVyZSBhcyBlaXRoZXIgYSBKU09OIG9iamVjdCBvciBzdHJpbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJyxcbiAgfSlcbiAgaW1wb3J0SnNvblRvRGIoZGI6IGFueSwganNvbjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0cyBhIFNRTGl0ZSBEQiBhcyBhIEpTT04gc3RydWN0dXJlXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJyxcbiAgfSlcbiAgZXhwb3J0RGJUb0pzb24oZGI6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdpcGVzIGFsbCBkYXRhIGZyb20gYSBkYXRhYmFzZSBieSBkcm9wcGluZyBhbGwgZXhpc3RpbmcgdGFibGVzXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJyxcbiAgfSlcbiAgd2lwZURiKGRiOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19